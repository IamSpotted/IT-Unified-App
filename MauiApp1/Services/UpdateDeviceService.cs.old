using System.Diagnostics;
using System.Data.SqlClient;
using MauiApp1.Interfaces;
using MauiApp1.Models;

namespace MauiApp1.Services;

public class UpdateDeviceService : IUpdateDeviceService
{
    private readonly ILogger<UpdateDeviceService> _logger;
    private readonly IDatabaseService _databaseService;
    private readonly SecureCredentialsService _credentialsService;

    public UpdateDeviceService(ILogger<UpdateDeviceService> logger, IDatabaseService databaseService, SecureCredentialsService credentialsService)
    {
        _logger = logger;
        _databaseService = databaseService;
        _credentialsService = credentialsService;
    }

    /// <summary>
    /// Updates an existing device in the database using SqlQueryService with the same connection logic as search
    /// </summary>
    public async Task<bool> UpdateDeviceAsync(Models.Device device, string deviceType = "Other")
    {
        try
        {
            // Required field validation
            if (string.IsNullOrWhiteSpace(device.Hostname))
            {
                _logger.LogError("Hostname is required and cannot be empty.");
                return false;
            }

            // Get credentials using the same service as search
            var credentials = await _credentialsService.GetDatabaseCredentialsAsync();
            if (credentials == null)
            {
                _logger.LogError("No database credentials available for UpdateDevice");
                return false;
            }

            // Build connection string using the same method as search
            var connectionString = BuildConnectionString(credentials.Server, credentials.Database,
                credentials.UseWindowsAuthentication, credentials.Username, credentials.Password);

            _logger.LogInformation("UpdateDeviceAsync: Connecting to Server='{Server}', Database='{Database}', Device='{Hostname}'", 
                credentials.Server, credentials.Database, device.Hostname);

            using var connection = new SqlConnection(connectionString);
            await connection.OpenAsync();

            using var transaction = connection.BeginTransaction();

            try
            {
                // Log the start of the update operation via DatabaseService audit
                await _databaseService.LogAuditEntryAsync(device.device_id, "UPDATE_INITIATED", 
                    "APPLICATION_UPDATE", null, $"Device update started via UpdateDeviceService for {device.Hostname}", 
                    $"Update initiated by UpdateDeviceService for device type: {deviceType}");

                // Use SqlQueryService.UpdateDeviceQuery - same as other successful operations
                using var command = new SqlCommand(SQLQueryService.UpdateDeviceQuery, connection, transaction);
                
                // Add all parameters matching the UpdateDeviceQuery
                command.Parameters.AddWithValue("@device_id", device.device_id);
                command.Parameters.AddWithValue("@hostname", device.Hostname);
                command.Parameters.AddWithValue("@serial_number", device.SerialNumber ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@asset_tag", device.AssetTag ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@domain_name", device.DomainName ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@is_domain_joined", device.IsDomainJoined);
                command.Parameters.AddWithValue("@manufacturer", device.Manufacturer ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@model", device.Model ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@cpu_info", device.CPUInfo ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@bios_version", device.BIOSVersion ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@total_ram_gb", device.TotalRAMGB ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@ram_type", device.RAMType ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@ram_speed", device.RAMSpeed ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@ram_manufacturer", device.RAMManufacturer ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@os_name", device.OSName ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@os_version", device.OSVersion ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@os_architecture", device.OSArchitecture ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@os_install_date", device.OSInstallDate ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@storage_info", device.StorageInfo ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@storage_type", device.StorageType ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@storage_model", device.StorageModel ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@drive2_name", device.Drive2Name ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@drive2_capacity", device.Drive2Capacity ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@drive2_type", device.Drive2Type ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@drive2_model", device.Drive2Model ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@drive3_name", device.Drive3Name ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@drive3_capacity", device.Drive3Capacity ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@drive3_type", device.Drive3Type ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@drive3_model", device.Drive3Model ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@drive4_name", device.Drive4Name ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@drive4_capacity", device.Drive4Capacity ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@drive4_type", device.Drive4Type ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@drive4_model", device.Drive4Model ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@primary_ip", device.PrimaryIP ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@primary_mac", device.PrimaryMAC ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@primary_subnet", device.PrimarySubnet ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@primary_dns", device.PrimaryDNS ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@secondary_dns", device.SecondaryDNS ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@nic2_name", device.NIC2Name ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@nic2_ip", device.NIC2IP ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@nic2_mac", device.NIC2MAC ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@nic2_subnet", device.NIC2Subnet ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@nic3_name", device.NIC3Name ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@nic3_ip", device.NIC3IP ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@nic3_mac", device.NIC3MAC ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@nic3_subnet", device.NIC3Subnet ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@nic4_name", device.NIC4Name ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@nic4_ip", device.NIC4IP ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@nic4_mac", device.NIC4MAC ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@nic4_subnet", device.NIC4Subnet ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@web_interface_url", device.WebInterfaceURL ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@device_status", device.DeviceStatus ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@area", device.Area ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@zone", device.Zone ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@line", device.Line ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@pitch", device.Pitch ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@floor", device.Floor ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@pillar", device.Pillar ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@additional_notes", device.AdditionalNotes ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@updated_at", DateTime.Now);
                command.Parameters.AddWithValue("@last_discovered", device.LastDiscovered ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@discovery_method", device.DiscoveryMethod ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@device_type", deviceType);
                command.Parameters.AddWithValue("@equipment_group", device.EquipmentGroup ?? (object)DBNull.Value);

                var rowsAffected = await command.ExecuteNonQueryAsync();

                if (rowsAffected > 0)
                {
                    // Log successful completion
                    await _databaseService.LogAuditEntryAsync(device.device_id, "UPDATE_SUCCESS", 
                        "APPLICATION_UPDATE", null, $"Device update completed successfully via UpdateDeviceService using SqlQueryService", 
                        $"Update completed successfully for device type: {deviceType}");

                    await transaction.CommitAsync();
                    
                    _logger.LogInformation("Successfully updated device '{hostname}' (ID: {device_id}) using SqlQueryService", 
                        device.Hostname, device.device_id);
                    
                    return true;
                }
                else
                {
                    // Log failure
                    await _databaseService.LogAuditEntryAsync(device.device_id, "UPDATE_FAILED", 
                        "APPLICATION_UPDATE", null, $"Device update failed - no rows affected via UpdateDeviceService", 
                        $"Update failed for device type: {deviceType}");

                    await transaction.RollbackAsync();
                    _logger.LogWarning("Failed to update device '{hostname}' (ID: {device_id}) - no rows affected", 
                        device.Hostname, device.device_id);
                    return false;
                }
            }
            catch (Exception ex)
            {
                await transaction.RollbackAsync();
                _logger.LogError(ex, "Error during device update transaction for '{hostname}'", device.Hostname);
                throw;
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error updating device '{hostname}' via UpdateDeviceService using SqlQueryService", device.Hostname);

            // Log the error in audit trail if we have a device ID
            if (device.device_id > 0)
            {
                try
                {
                    await _databaseService.LogAuditEntryAsync(device.device_id, "UPDATE_ERROR", 
                        "APPLICATION_UPDATE", null, $"Error during device update: {ex.Message}", 
                        $"Exception occurred during UpdateDeviceService operation using SqlQueryService");
                }
                catch (Exception auditEx)
                {
                    _logger.LogWarning(auditEx, "Failed to log audit entry for update error");
                }
            }

            return false;
        }
    }

    /// <summary>
    /// Updates a device with comprehensive audit information including application user, discovery session ID, and change reason using SqlQueryService
    /// </summary>
    public async Task<bool> UpdateDeviceAsync(Models.Device device, string applicationUser, string discoverySessionId, string changeReason, string deviceType = "Other")
    {
        try
        {
            // Required field validation
            if (string.IsNullOrWhiteSpace(device.Hostname))
            {
                _logger.LogError("Hostname is required and cannot be empty.");
                return false;
            }

            if (string.IsNullOrWhiteSpace(changeReason))
            {
                _logger.LogError("Change reason is required for device updates.");
                return false;
            }

            // Get credentials using the same service as search
            var credentials = await _credentialsService.GetDatabaseCredentialsAsync();
            if (credentials == null)
            {
                _logger.LogError("No database credentials available for UpdateDevice with audit");
                return false;
            }

            // Build connection string using the same method as search
            var connectionString = BuildConnectionString(credentials.Server, credentials.Database,
                credentials.UseWindowsAuthentication, credentials.Username, credentials.Password);

            _logger.LogInformation("UpdateDeviceAsync (with audit): Connecting to Server='{Server}', Database='{Database}', Device='{Hostname}', User='{User}', Session='{Session}', Reason='{Reason}'", 
                credentials.Server, credentials.Database, device.Hostname, applicationUser, discoverySessionId, changeReason);

            using var connection = new SqlConnection(connectionString);
            await connection.OpenAsync();

            using var transaction = connection.BeginTransaction();

            try
            {
                // Use SqlQueryService.UpdateDeviceQuery - same as other successful operations
                using var command = new SqlCommand(SQLQueryService.UpdateDeviceQuery, connection, transaction);
                
                // Add all parameters matching the UpdateDeviceQuery
                command.Parameters.AddWithValue("@device_id", device.device_id);
                command.Parameters.AddWithValue("@hostname", device.Hostname);
                command.Parameters.AddWithValue("@serial_number", device.SerialNumber ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@asset_tag", device.AssetTag ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@domain_name", device.DomainName ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@is_domain_joined", device.IsDomainJoined);
                command.Parameters.AddWithValue("@manufacturer", device.Manufacturer ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@model", device.Model ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@cpu_info", device.CPUInfo ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@bios_version", device.BIOSVersion ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@total_ram_gb", device.TotalRAMGB ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@ram_type", device.RAMType ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@ram_speed", device.RAMSpeed ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@ram_manufacturer", device.RAMManufacturer ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@os_name", device.OSName ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@os_version", device.OSVersion ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@os_architecture", device.OSArchitecture ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@os_install_date", device.OSInstallDate ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@storage_info", device.StorageInfo ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@storage_type", device.StorageType ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@storage_model", device.StorageModel ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@drive2_name", device.Drive2Name ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@drive2_capacity", device.Drive2Capacity ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@drive2_type", device.Drive2Type ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@drive2_model", device.Drive2Model ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@drive3_name", device.Drive3Name ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@drive3_capacity", device.Drive3Capacity ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@drive3_type", device.Drive3Type ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@drive3_model", device.Drive3Model ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@drive4_name", device.Drive4Name ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@drive4_capacity", device.Drive4Capacity ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@drive4_type", device.Drive4Type ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@drive4_model", device.Drive4Model ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@primary_ip", device.PrimaryIP ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@primary_mac", device.PrimaryMAC ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@primary_subnet", device.PrimarySubnet ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@primary_dns", device.PrimaryDNS ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@secondary_dns", device.SecondaryDNS ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@nic2_name", device.NIC2Name ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@nic2_ip", device.NIC2IP ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@nic2_mac", device.NIC2MAC ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@nic2_subnet", device.NIC2Subnet ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@nic3_name", device.NIC3Name ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@nic3_ip", device.NIC3IP ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@nic3_mac", device.NIC3MAC ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@nic3_subnet", device.NIC3Subnet ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@nic4_name", device.NIC4Name ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@nic4_ip", device.NIC4IP ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@nic4_mac", device.NIC4MAC ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@nic4_subnet", device.NIC4Subnet ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@web_interface_url", device.WebInterfaceURL ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@device_status", device.DeviceStatus ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@area", device.Area ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@zone", device.Zone ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@line", device.Line ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@pitch", device.Pitch ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@floor", device.Floor ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@pillar", device.Pillar ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@additional_notes", device.AdditionalNotes ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@updated_at", DateTime.Now);
                command.Parameters.AddWithValue("@last_discovered", device.LastDiscovered ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@discovery_method", device.DiscoveryMethod ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@device_type", deviceType);
                command.Parameters.AddWithValue("@equipment_group", device.EquipmentGroup ?? (object)DBNull.Value);

                var rowsAffected = await command.ExecuteNonQueryAsync();

                if (rowsAffected > 0)
                {
                    await transaction.CommitAsync();
                    
                    // Log custom audit entry with the provided audit information
                    await LogCustomAuditEntryAsync(device.device_id, "UPDATE", "DEVICE_UPDATED", "", 
                        $"Device updated via UpdateDeviceService", applicationUser, changeReason, 
                        string.IsNullOrEmpty(discoverySessionId) ? (Guid?)null : Guid.Parse(discoverySessionId));
                    
                    _logger.LogInformation("Successfully updated device '{hostname}' (ID: {device_id}) using SqlQueryService with audit - User: {User}, Session: {Session}", 
                        device.Hostname, device.device_id, applicationUser, discoverySessionId);
                    
                    return true;
                }
                else
                {
                    await transaction.RollbackAsync();
                    _logger.LogWarning("Failed to update device '{hostname}' (ID: {device_id}) - no rows affected with audit info - User: {User}, Session: {Session}", 
                        device.Hostname, device.device_id, applicationUser, discoverySessionId);
                    return false;
                }
            }
            catch (Exception ex)
            {
                await transaction.RollbackAsync();
                _logger.LogError(ex, "Error during device update transaction for '{hostname}' with audit info", device.Hostname);
                throw;
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error updating device '{hostname}' with audit info - User: {User}, Session: {Session}, Reason: {Reason}", 
                device.Hostname, applicationUser, discoverySessionId, changeReason);

            return false;
        }
    }

    private static string BuildConnectionString(string server, string database, bool useWindowsAuth,
        string? username, string? password, int connectionTimeout = 30)
    {
        var builder = new SqlConnectionStringBuilder
        {
            DataSource = server,
            InitialCatalog = database,
            ConnectTimeout = connectionTimeout,
            IntegratedSecurity = useWindowsAuth
        };

        if (!useWindowsAuth && !string.IsNullOrEmpty(username))
        {
            builder.UserID = username;
            builder.Password = password ?? "";
        }

        return builder.ConnectionString;
    }

    /// <summary>
    /// Logs a custom audit entry using the LogCustomAuditEntry stored procedure
    /// </summary>
    private async Task LogCustomAuditEntryAsync(int deviceId, string actionType, string fieldName, string oldValue, string newValue, string applicationUser, string changeReason, Guid? discoverySessionId)
    {
        try
        {
            var credentials = await _credentialsService.GetDatabaseCredentialsAsync();
            if (credentials == null)
            {
                _logger.LogWarning("No database credentials available for audit logging");
                return;
            }

            var connectionString = BuildConnectionString(credentials.Server, credentials.Database,
                credentials.UseWindowsAuthentication, credentials.Username, credentials.Password);

            using var connection = new SqlConnection(connectionString);
            await connection.OpenAsync();

            const string auditQuery = @"
                EXEC dbo.LogCustomAuditEntry 
                    @DeviceId = @DeviceID,
                    @ActionType = @ActionType,
                    @FieldName = @FieldName,
                    @OldValue = @OldValue,
                    @NewValue = @NewValue,
                    @ApplicationUser = @ApplicationUser,
                    @ChangeReason = @ChangeReason,
                    @DiscoverySessionId = @DiscoverySessionId";

            using var auditCommand = new SqlCommand(auditQuery, connection);
            auditCommand.Parameters.AddWithValue("@DeviceID", deviceId);
            auditCommand.Parameters.AddWithValue("@ActionType", actionType);
            auditCommand.Parameters.AddWithValue("@FieldName", fieldName);
            auditCommand.Parameters.AddWithValue("@OldValue", string.IsNullOrEmpty(oldValue) ? (object)DBNull.Value : oldValue);
            auditCommand.Parameters.AddWithValue("@NewValue", string.IsNullOrEmpty(newValue) ? (object)DBNull.Value : newValue);
            auditCommand.Parameters.AddWithValue("@ApplicationUser", applicationUser);
            auditCommand.Parameters.AddWithValue("@ChangeReason", changeReason);
            auditCommand.Parameters.AddWithValue("@DiscoverySessionId", discoverySessionId ?? (object)DBNull.Value);

            await auditCommand.ExecuteNonQueryAsync();
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "Failed to log custom audit entry for device {DeviceId}", deviceId);
        }
    }
}
